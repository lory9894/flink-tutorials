version: '3.8'
services:

  jobmanager:
    image: flink:1.17.2-java11
    ports:
      - "8082:8081"
    command: jobmanager
    networks:
      - flink-network
      - connection-network
    environment:
      - |
        FLINK_PROPERTIES=jobmanager.rpc.address: jobmanager
        jobmanager.scheduler: adaptive
        

  taskmanager1:
    image: flink_log
    build: .
    depends_on:
      - jobmanager
    command: taskmanager
    networks:
      - flink-network
      - connection-network
    environment:
      - |
        FLINK_PROPERTIES=jobmanager.rpc.address: jobmanager
    volumes:
      - type: bind #in questo modo si possono cambiare le configurazioni per il logging a runtime
        source : src/main/resources/log4j-console.properties
        target : /opt/flink/conf/log4j-console.properties

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.1
    hostname: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - kafka-network
      - connection-network

  kafka:
    image: confluentinc/cp-server:7.3.1
    hostname: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    expose:
      - "29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://kafka:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka:29092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
    networks:
      - kafka-network
      - connection-network

  schema-registry:
    image: confluentinc/cp-schema-registry:7.3.1
    hostname: schemaregistry
    depends_on:
      - kafka
    links:
      - kafka
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    networks:
        - kafka-network
        - connection-network

  sqlserver:
    hostname: sqlserver
    image: mcr.microsoft.com/mssql/server:2019-latest
    environment:
      - ACCEPT_EULA=Y
      - MSSQL_PID=Developer
      - SA_PASSWORD=Pass@Word
      - MSSQL_AGENT_ENABLED=true
    ports:
      - 1433:1433
    expose:
      - 1433
    networks:
      - connection-network
    healthcheck:
      test: [ "CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P Pass@Word -Q 'SELECT 1' || exit 1" ]
      interval: 10s
      retries: 10
      start_period: 10s
      timeout: 3s

  init-sqlserver:
    image: mcr.microsoft.com/mssql/server:2019-latest
    depends_on:
        sqlserver:
            condition: service_healthy
    networks:
        - connection-network
    volumes:
      - ./init:/docker-entrypoint-initdb.d
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until sqlserver is reachable
      /opt/mssql-tools/bin/sqlcmd -S sqlserver -U sa -P Pass@Word -Q 'SELECT 1'
      
      echo -e 'Creating database'
      /opt/mssql-tools/bin/sqlcmd -S sqlserver -U sa -P Pass@Word -Q 'CREATE DATABASE FlinkDB'
      
      echo -e 'Creating tables'
      /opt/mssql-tools/bin/sqlcmd -b -S sqlserver -U sa -P 'Pass@Word' -d FlinkDB -Q 'CREATE TABLE dbo.averages (uid BIGINT NOT NULL PRIMARY KEY, average float)'
      
      echo -e 'Successfully created database and tables'
      "


  init-kafka:
    image: confluentinc/cp-server:7.3.1
    depends_on:
      - kafka
    networks:
      - kafka-network
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:29092 --list
      
      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic users --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic transportOrders --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic purchases --replication-factor 1 --partitions 1

      
      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:29092 --list
      "  


networks:
  flink-network:
  kafka-network:
    driver: bridge
  connection-network:
